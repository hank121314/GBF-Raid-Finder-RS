// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `raid_tweet.proto`
use crate::models::Language;

use protobuf::Message;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct RaidTweet {
    // message fields
    pub tweet_id: ::std::string::String,
    pub screen_name: ::std::string::String,
    pub boss_name: ::std::string::String,
    pub raid_id: ::std::string::String,
    pub text: ::std::string::String,
    pub created: u32,
    pub language: ::std::string::String,
    pub profile_image: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaidTweet {
    fn default() -> &'a RaidTweet {
        <RaidTweet as ::protobuf::Message>::default_instance()
    }
}

impl RaidTweet {
    pub fn new() -> RaidTweet {
        ::std::default::Default::default()
    }
    
    pub fn with_args<S1, S2, S3, S4, S5, S6>
        (tweet_id: S1, screen_name: S2, created: u32, boss_name: S3, raid_id: S4, text: S5, language: Language, profile_image: S6) -> Self 
    where 
    S1: Into<String>,
    S2: Into<String>,
    S3: Into<String>,
    S4: Into<String>,
    S5: Into<String>,
    S6: Into<String>,
        {
            Self {
                tweet_id: tweet_id.into(),
                screen_name: screen_name.into(),
                created,
                boss_name: boss_name.into(),
                raid_id: raid_id.into(),
                text: text.into(),
                language: language.to_string(),
                profile_image: profile_image.into(),
                unknown_fields: Default::default(),
                cached_size: Default::default()
            }
        }

    // string tweet_id = 1;


    pub fn get_tweet_id(&self) -> &str {
        &self.tweet_id
    }
    pub fn clear_tweet_id(&mut self) {
        self.tweet_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tweet_id(&mut self, v: ::std::string::String) {
        self.tweet_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tweet_id(&mut self) -> &mut ::std::string::String {
        &mut self.tweet_id
    }

    // Take field
    pub fn take_tweet_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tweet_id, ::std::string::String::new())
    }

    // string screen_name = 2;


    pub fn get_screen_name(&self) -> &str {
        &self.screen_name
    }
    pub fn clear_screen_name(&mut self) {
        self.screen_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_screen_name(&mut self, v: ::std::string::String) {
        self.screen_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_screen_name(&mut self) -> &mut ::std::string::String {
        &mut self.screen_name
    }

    // Take field
    pub fn take_screen_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.screen_name, ::std::string::String::new())
    }

    // string boss_name = 3;


    pub fn get_boss_name(&self) -> &str {
        &self.boss_name
    }
    pub fn clear_boss_name(&mut self) {
        self.boss_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_boss_name(&mut self, v: ::std::string::String) {
        self.boss_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boss_name(&mut self) -> &mut ::std::string::String {
        &mut self.boss_name
    }

    // Take field
    pub fn take_boss_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.boss_name, ::std::string::String::new())
    }

    // string raid_id = 4;


    pub fn get_raid_id(&self) -> &str {
        &self.raid_id
    }
    pub fn clear_raid_id(&mut self) {
        self.raid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_raid_id(&mut self, v: ::std::string::String) {
        self.raid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raid_id(&mut self) -> &mut ::std::string::String {
        &mut self.raid_id
    }

    // Take field
    pub fn take_raid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.raid_id, ::std::string::String::new())
    }

    // string text = 5;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }

    // uint32 created = 6;


    pub fn get_created(&self) -> u32 {
        self.created
    }
    pub fn clear_created(&mut self) {
        self.created = 0;
    }

    // Param is passed by value, moved
    pub fn set_created(&mut self, v: u32) {
        self.created = v;
    }

    // string language = 7;


    pub fn get_language(&self) -> &str {
        &self.language
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        &mut self.language
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language, ::std::string::String::new())
    }

    // string profile_image = 8;


    pub fn get_profile_image(&self) -> &str {
        &self.profile_image
    }
    pub fn clear_profile_image(&mut self) {
        self.profile_image.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_image(&mut self, v: ::std::string::String) {
        self.profile_image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_image(&mut self) -> &mut ::std::string::String {
        &mut self.profile_image
    }

    // Take field
    pub fn take_profile_image(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.profile_image, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RaidTweet {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tweet_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.screen_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.boss_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.raid_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.created = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.profile_image)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tweet_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tweet_id);
        }
        if !self.screen_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.screen_name);
        }
        if !self.boss_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.boss_name);
        }
        if !self.raid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.raid_id);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.text);
        }
        if self.created != 0 {
            my_size += ::protobuf::rt::value_size(6, self.created, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.language);
        }
        if !self.profile_image.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.profile_image);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tweet_id.is_empty() {
            os.write_string(1, &self.tweet_id)?;
        }
        if !self.screen_name.is_empty() {
            os.write_string(2, &self.screen_name)?;
        }
        if !self.boss_name.is_empty() {
            os.write_string(3, &self.boss_name)?;
        }
        if !self.raid_id.is_empty() {
            os.write_string(4, &self.raid_id)?;
        }
        if !self.text.is_empty() {
            os.write_string(5, &self.text)?;
        }
        if self.created != 0 {
            os.write_uint32(6, self.created)?;
        }
        if !self.language.is_empty() {
            os.write_string(7, &self.language)?;
        }
        if !self.profile_image.is_empty() {
            os.write_string(8, &self.profile_image)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaidTweet {
        RaidTweet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tweet_id",
                |m: &RaidTweet| { &m.tweet_id },
                |m: &mut RaidTweet| { &mut m.tweet_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "screen_name",
                |m: &RaidTweet| { &m.screen_name },
                |m: &mut RaidTweet| { &mut m.screen_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "boss_name",
                |m: &RaidTweet| { &m.boss_name },
                |m: &mut RaidTweet| { &mut m.boss_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "raid_id",
                |m: &RaidTweet| { &m.raid_id },
                |m: &mut RaidTweet| { &mut m.raid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &RaidTweet| { &m.text },
                |m: &mut RaidTweet| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "created",
                |m: &RaidTweet| { &m.created },
                |m: &mut RaidTweet| { &mut m.created },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language",
                |m: &RaidTweet| { &m.language },
                |m: &mut RaidTweet| { &mut m.language },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "profile_image",
                |m: &RaidTweet| { &m.profile_image },
                |m: &mut RaidTweet| { &mut m.profile_image },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RaidTweet>(
                "RaidTweet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RaidTweet {
        static instance: ::protobuf::rt::LazyV2<RaidTweet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RaidTweet::new)
    }
}

impl ::protobuf::Clear for RaidTweet {
    fn clear(&mut self) {
        self.tweet_id.clear();
        self.screen_name.clear();
        self.boss_name.clear();
        self.raid_id.clear();
        self.text.clear();
        self.created = 0;
        self.language.clear();
        self.profile_image.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaidTweet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaidTweet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10raid_tweet.proto\"\xec\x01\n\tRaidTweet\x12\x19\n\x08tweet_id\x18\
    \x01\x20\x01(\tR\x07tweetId\x12\x1f\n\x0bscreen_name\x18\x02\x20\x01(\tR\
    \nscreenName\x12\x1b\n\tboss_name\x18\x03\x20\x01(\tR\x08bossName\x12\
    \x17\n\x07raid_id\x18\x04\x20\x01(\tR\x06raidId\x12\x12\n\x04text\x18\
    \x05\x20\x01(\tR\x04text\x12\x18\n\x07created\x18\x06\x20\x01(\rR\x07cre\
    ated\x12\x1a\n\x08language\x18\x07\x20\x01(\tR\x08language\x12#\n\rprofi\
    le_image\x18\x08\x20\x01(\tR\x0cprofileImageJ\xe2\x03\n\x06\x12\x04\0\0\
    \x0b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\
    \x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x11\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x03\x02\x16\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x03\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x02\x19\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x04\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x17\x18\
    \n\x0b\n\x04\x04\0\x02\x02\x12\x03\x05\x02\x17\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x05\t\x12\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x05\x15\x16\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x06\x02\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x06\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x06\t\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x06\x13\x14\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x07\
    \x02\x12\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\x07\t\r\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\
    \x07\x10\x11\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x08\x02\x15\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x08\t\x10\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x08\x13\x14\n\x0b\n\
    \x04\x04\0\x02\x06\x12\x03\t\x02\x16\n\x0c\n\x05\x04\0\x02\x06\x05\x12\
    \x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\t\t\x11\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03\t\x14\x15\n\x0b\n\x04\x04\0\x02\x07\x12\x03\n\
    \x02\x1b\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x07\x01\x12\x03\n\t\x16\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\n\
    \x19\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
